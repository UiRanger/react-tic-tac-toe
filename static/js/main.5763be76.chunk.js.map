{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["s1","s2","s3","flag","calculateWinner","squares","lines","i","length","a","b","c","Square","buttonClick","props","func","type","OverlayTrigger","key","placement","overlay","Tooltip","id","Button","variant","className","onClick","this","value","React","Component","WinSquare","Board","handleClick","renderSquare","AnimatedCircles","Spinner","animation","Game","changeValue","history","state","slice","stepNumber","steps","xIsNext","setState","concat","Array","fill","step","status","current","winner","moves","map","move","desc","jumpTo","console","log","alert","Jumbotron","fluid","Container","ProgressBar","animated","now","Row","Col","isOver","Alert","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5763be76.chunk.js","sourcesContent":["import React from 'react';\nimport {Button,Container,Row,Col, Alert,OverlayTrigger,Tooltip,Spinner,Jumbotron,ProgressBar} from 'react-bootstrap';\nvar s1=null;\nvar s2=null;\nvar s3=null;\nvar flag=0;\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      s1=a;\n      s2=b;\n      s3=c;\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nclass Square extends React.Component {\n\n  buttonClick = ()=>{\n\n    this.props.func();\n  }\n\n  render() {\n    return (\n      <>\n      <style type=\"text/css\">\n      {`\n      .btn-flat {\n        background-color: purple;\n        color: white;\n        font-size: 45px;\n        padding: 0;\n        height: 120px;\n        width: 120px;\n        border: 1px solid #999;\n        font-weight: bold;\n        line-height: 34px;\n      }\n      `}\n    </style>\n    <OverlayTrigger\n      key=\"top\"\n      placement=\"top\"\n      overlay={\n        <Tooltip id={`tooltip-top`}>\n          Tap to make a move...\n        </Tooltip>\n      }\n    >\n      <Button variant=\"flat\" className=\"square\" onClick={this.buttonClick} >\n        {this.props.value}\n      </Button>\n      </OverlayTrigger>\n      </>\n    );\n  }\n}\n\nclass WinSquare extends React.Component {\n\n  buttonClick = ()=>{\n    this.props.func();\n  }\n\n  render() {\n    return (\n      <>\n      <style type=\"text/css\">\n      {`\n      .btn-flatwin {\n        background-color: green;\n        color: white;\n        font-size: 45px;\n        padding: 0;\n        height: 120px;\n        width: 120px;\n        border: 1px solid #999;\n        font-weight: bold;\n        line-height: 34px;\n      }\n      `}\n    </style>\n    <OverlayTrigger\n      key=\"top\"\n      placement=\"top\"\n      overlay={\n        <Tooltip id={`tooltip-top`}>\n          Tap to make a move...\n        </Tooltip>\n      }\n    >\n      <Button variant=\"flatwin\" className=\"square\" onClick={this.buttonClick} >\n        {this.props.value}\n      </Button>\n      </OverlayTrigger>\n      </>\n    );\n  }\n}\n\nclass Board extends React.Component {\n\n  renderSquare(i) {\n    if(i===s1 || i===s2 || i===s3)\n    {\n      return(\n        <WinSquare value={this.props.squares[i]} func={ ()=>this.props.handleClick(i) }/>\n      );\n    }\n    else\n    {\n    return(\n     <Square value={this.props.squares[i]} func={ ()=>this.props.handleClick(i) }/>\n    );\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass AnimatedCircles extends React.Component{\n  render()\n  {\n    return(\n      <div>\n      <Spinner animation=\"grow\" variant=\"primary\" />\n          <Spinner animation=\"grow\" variant=\"secondary\" />\n  <Spinner animation=\"grow\" variant=\"success\" />\n  <Spinner animation=\"grow\" variant=\"danger\" />\n  <Spinner animation=\"grow\" variant=\"warning\" />\n  <Spinner animation=\"grow\" variant=\"info\" />\n  <Spinner animation=\"grow\" variant=\"light\" />\n  <Spinner animation=\"grow\" variant=\"dark\" />\n  <Spinner animation=\"grow\" variant=\"secondary\" />\n  <Spinner animation=\"grow\" variant=\"success\" />\n  <Spinner animation=\"grow\" variant=\"danger\" />\n  <Spinner animation=\"grow\" variant=\"warning\" />\n  <Spinner animation=\"grow\" variant=\"info\" />\n  <Spinner animation=\"grow\" variant=\"light\" />\n  <Spinner animation=\"grow\" variant=\"dark\" />\n  <Spinner animation=\"grow\" variant=\"secondary\" />\n  <Spinner animation=\"grow\" variant=\"success\" />\n  <Spinner animation=\"grow\" variant=\"danger\" />\n  <Spinner animation=\"grow\" variant=\"warning\" />\n  <Spinner animation=\"grow\" variant=\"info\" />\n  <Spinner animation=\"grow\" variant=\"light\" />\n  <Spinner animation=\"grow\" variant=\"dark\" />\n  <Spinner animation=\"grow\" variant=\"secondary\" />\n  <Spinner animation=\"grow\" variant=\"success\" />\n  <Spinner animation=\"grow\" variant=\"danger\" />\n  <Spinner animation=\"grow\" variant=\"warning\" />\n  <Spinner animation=\"grow\" variant=\"info\" />\n  <Spinner animation=\"grow\" variant=\"light\" />\n  <Spinner animation=\"grow\" variant=\"dark\" />\n  <Spinner animation=\"grow\" variant=\"secondary\" />\n  <Spinner animation=\"grow\" variant=\"success\" />\n  <Spinner animation=\"grow\" variant=\"danger\" />\n  <Spinner animation=\"grow\" variant=\"warning\" />\n  <Spinner animation=\"grow\" variant=\"info\" /> \n  </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      history:[{\n        squares: Array(9).fill(null)\n      }],\n      stepNumber:0,\n      xIsNext: true\n    }\n  }\n\n  changeValue = (i)=>{\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    const steps = this.state.stepNumber;\n    if (calculateWinner(squares) || squares[i] || steps===9) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    let steps = this.state.stepNumber;\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Go to move #' + move :\n        'Go to game start';\n      return (\n        <>\n        <li key={move} >\n          <Button variant=\"info\" onClick={() => this.jumpTo(move)} >{desc}</Button>\n        </li>\n        </>\n      );\n    });\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n      flag=1;\n      console.log(flag);\n      console.log(s1);\n      console.log(s2);\n      console.log(s3);\n      alert(\"🎉🎉🎉🎉 Congratulations... \"+ status + \" 🎉🎉🎉🎉\");\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n    if(steps===9 && !winner)\n    {\n      status='Match Tied!';\n      alert('Match Tied!');\n    }\n      \n    return (\n      <div className=\"game\" >\n        <Jumbotron fluid>\n          <Container>\n          <AnimatedCircles/>\n          <center><h1>Tic Tac Toe - Awesome Childhood Game</h1></center>\n          <AnimatedCircles/>\n          </Container>\n        </Jumbotron>\n        <ProgressBar animated now={(100*steps)/9} variant=\"warning\" />\n        <br></br>\n        <Container>\n  <Row>\n    <Col>\n        <div className=\"game-board\" >\n          <Board squares={current.squares} handleClick={(i)=>this.changeValue(i)} isOver={flag}/>\n        </div>\n    </Col>\n    <Col>\n        <div className=\"game-info\">\n          <div>\n            <Alert variant={winner ? \"success\" : (steps===9 ?\"danger\":\"primary\")}>\n          <h2>{ status }</h2>\n          </Alert>\n          </div>\n          <ol>{moves}</ol>\n        </div>\n      </Col>\n      \n      </Row>\n      </Container>\n      <br></br>\n      \n      </div>\n    );\n  }\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}